{"version":3,"sources":["services/personService.js","components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["serverURL","axios","get","then","x","data","person","post","id","put","delete","Filter","text","onChange","value","PersonForm","name","number","setName","setNumber","onSubmit","e","target","type","Persons","persons","remove","map","key","onClick","Notification","message","style","className","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","filter","setFilter","notification","setNotification","useEffect","personService","addOrUpdate","newPerson","personExistsAlready","find","notifySuccess","concat","notify","notifyError","setTimeout","event","preventDefault","toLowerCase","includes","window","confirm","catch","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0de44058.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst serverURL = \"http://localhost:3001/persons\";\n\nconst getAll = () => {\n    return axios\n        .get(serverURL)\n        .then(x => x.data);\n}\n\nconst add = (person) => {\n    return axios\n        .post(serverURL, person)\n        .then(x => x.data);\n}\n\nconst update = (id, person) => {\n    return axios\n        .put(`${serverURL}/${id}`, person)\n        .then(x => x.data);\n}\n\nconst remove = (id) => {\n    return axios\n        .delete(`${serverURL}/${id}`)\n        .then(x => x.data);\n}\n\nexport default {getAll, add, update, remove};\n","import React from 'react';\n\nconst Filter = ({text, onChange}) => \n    <div>\n        filter shown with:\n        <input value={text} onChange={onChange}/>\n    </div>;\n\nexport default Filter;","import React from 'react';\n\nconst PersonForm = ({name, number, setName, setNumber, onSubmit}) => {\n    return (\n        <form onSubmit={onSubmit}>\n            <div>name: <input value={name} onChange={(e) => setName(e.target.value)}/></div>\n            <div>number: <input value={number} onChange={(e) => setNumber(e.target.value)}/></div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    );\n}\n\nexport default PersonForm;","import React from 'react';\n\nconst Persons = ({persons, remove}) => {\n    return persons.map(x =>\n        <p key={x.id}>\n            {x.name} {x.number} <button onClick={()=>remove(x.id)}>Delete</button>\n        </p>\n    );\n}\n\nexport default Persons;","import React from 'react';\nimport './Notification.css';\n\nconst Notification = ({message, style}) =>\n{\n    if (!message){ return null; }\n\n    return (\n        <div className={style}>{message}</div>\n    )\n}\n\nexport default Notification;","import React, { useState, useEffect } from 'react';\nimport personService from './services/personService';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport Notification from './components/Notification';\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]);\n  const [ newName, setNewName ] = useState('');\n  const [ newNumber, setNewNumber ] = useState('');\n  const [ filter, setFilter ] = useState('');\n  const [ notification, setNotification ] = useState({message:'', style:'success'});\n\n  useEffect(() => {\n    personService.getAll()\n      .then(persons => setPersons(persons))\n  }, [])\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n\n    const newPerson = {\n      name:newName,\n      number:newNumber\n    };\n\n    addOrUpdate(newPerson);\n    \n    setNewName('');\n    setNewNumber('');\n  }\n\n  const addOrUpdate = (newPerson) => {\n    const personExistsAlready = persons.find(x => x.name === newPerson.name);\n\n    if (!personExistsAlready){\n      personService.add(newPerson)\n        .then(x => {\n          setPersons(persons.concat(x))\n          notifySuccess(`Added ${newPerson.name}`);\n        });\n    }else{\n      personService.update(personExistsAlready.id, newPerson)\n        .then(person => {\n          setPersons(persons.map(x => x.id === person.id ? person : x))\n          notifySuccess(`Updated ${newPerson.name}`);\n        });\n    }\n  }\n  \n  const remove = (id) => {\n    const person = persons.find(x=>x.id===id);\n    if (window.confirm(`Do you want to delete ${person.name}`) === false) return;\n    \n    personService.remove(id)\n    .then(() => {\n      setPersons(persons.filter(x => x.id !== id));\n      notifySuccess(`Deleted ${person.name}`);\n    })\n    .catch(() => {\n      notifyError(`Information of ${person.name} has already been removed from server`);\n    });\n  }\n\n  const filterPersons = () => {\n    if (filter === '') return persons;    \n    return persons.filter(x => x.name.toLowerCase().includes(filter.toLowerCase()));\n  }\n\n  const notifySuccess = (message) => notify(message, 'success');\n\n  const notifyError = (message) => notify(message, 'error');\n\n  const notify = (message, style) => {    \n    setNotification({message, style});\n    setTimeout(() => setNotification({message:'', style:'success'}), 2000);\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>      \n      <Notification message={notification.message} style={notification.style}/>\n      <Filter text={filter} onChange={(e) => setFilter(e.target.value)} />\n      <h2>Add new</h2>   \n      <PersonForm name={newName} number={newNumber}\n        setName={setNewName} setNumber={setNewNumber}\n        onSubmit={onSubmit} />\n      <h2>Numbers</h2>\n      <Persons persons={filterPersons()} remove={remove} />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}