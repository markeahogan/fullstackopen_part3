{"version":3,"sources":["services/personService.js","components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","then","x","data","person","post","id","put","delete","Filter","text","onChange","value","PersonForm","name","number","setName","setNumber","onSubmit","e","target","type","Persons","persons","remove","map","key","onClick","Notification","message","style","className","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","filter","setFilter","notification","setNotification","useEffect","personService","addOrUpdate","newPerson","personExistsAlready","find","notifySuccess","concat","catch","notifyError","response","notify","setTimeout","event","preventDefault","toLowerCase","includes","window","confirm","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d08c3b5.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst serverURL = \"api/persons\";\r\n\r\nconst getAll = () => {\r\n    return axios\r\n        .get(serverURL)\r\n        .then(x => x.data);\r\n}\r\n\r\nconst add = (person) => {\r\n    return axios\r\n        .post(serverURL, person)\r\n        .then(x => x.data);\r\n}\r\n\r\nconst update = (id, person) => {\r\n    return axios\r\n        .put(`${serverURL}/${id}`, person)\r\n        .then(x => x.data);\r\n}\r\n\r\nconst remove = (id) => {\r\n    return axios\r\n        .delete(`${serverURL}/${id}`)\r\n        .then(x => x.data);\r\n}\r\n\r\nexport default {getAll, add, update, remove};\r\n","import React from 'react';\r\n\r\nconst Filter = ({text, onChange}) => \r\n    <div>\r\n        filter shown with:\r\n        <input value={text} onChange={onChange}/>\r\n    </div>;\r\n\r\nexport default Filter;","import React from 'react';\r\n\r\nconst PersonForm = ({name, number, setName, setNumber, onSubmit}) => {\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <div>name: <input value={name} onChange={(e) => setName(e.target.value)}/></div>\r\n            <div>number: <input value={number} onChange={(e) => setNumber(e.target.value)}/></div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default PersonForm;","import React from 'react';\r\n\r\nconst Persons = ({persons, remove}) => {\r\n    return persons.map(x =>\r\n        <p key={x.id}>\r\n            {x.name} {x.number} <button onClick={()=>remove(x.id)}>Delete</button>\r\n        </p>\r\n    );\r\n}\r\n\r\nexport default Persons;","import React from 'react';\r\nimport './Notification.css';\r\n\r\nconst Notification = ({message, style}) =>\r\n{\r\n    if (!message){ return null; }\r\n\r\n    return (\r\n        <div className={style}>{message}</div>\r\n    )\r\n}\r\n\r\nexport default Notification;","import React, { useState, useEffect } from 'react';\r\nimport personService from './services/personService';\r\nimport Filter from './components/Filter';\r\nimport PersonForm from './components/PersonForm';\r\nimport Persons from './components/Persons';\r\nimport Notification from './components/Notification';\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons] = useState([]);\r\n  const [ newName, setNewName ] = useState('');\r\n  const [ newNumber, setNewNumber ] = useState('');\r\n  const [ filter, setFilter ] = useState('');\r\n  const [ notification, setNotification ] = useState({message:'', style:'success'});\r\n\r\n  useEffect(() => {\r\n    personService.getAll()\r\n      .then(persons => setPersons(persons))\r\n  }, [])\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const newPerson = {\r\n      name:newName,\r\n      number:newNumber\r\n    };\r\n\r\n    addOrUpdate(newPerson);\r\n    \r\n    setNewName('');\r\n    setNewNumber('');\r\n  }\r\n\r\n  const addOrUpdate = (newPerson) => {\r\n    const personExistsAlready = persons.find(x => x.name === newPerson.name);\r\n\r\n    let action;\r\n    if (!personExistsAlready){\r\n      action = personService.add(newPerson)\r\n        .then(x => {\r\n          setPersons(persons.concat(x))\r\n          notifySuccess(`Added ${newPerson.name}`);\r\n        });\r\n    }else{\r\n      action = personService.update(personExistsAlready.id, newPerson)\r\n        .then(person => {\r\n          setPersons(persons.map(x => x.id === person.id ? person : x))\r\n          notifySuccess(`Updated ${newPerson.name}`);\r\n        });\r\n    }\r\n    action.catch(e => notifyError(e.response.data));\r\n  }\r\n  \r\n  const remove = (id) => {\r\n    const person = persons.find(x=>x.id===id);\r\n    if (window.confirm(`Do you want to delete ${person.name}`) === false) return;\r\n    \r\n    personService.remove(id)\r\n    .then(() => {\r\n      setPersons(persons.filter(x => x.id !== id));\r\n      notifySuccess(`Deleted ${person.name}`);\r\n    })\r\n    .catch(() => {\r\n      notifyError(`Information of ${person.name} has already been removed from server`);\r\n    });\r\n  }\r\n\r\n  const filterPersons = () => {\r\n    if (filter === '') return persons;    \r\n    return persons.filter(x => x.name.toLowerCase().includes(filter.toLowerCase()));\r\n  }\r\n\r\n  const notifySuccess = (message) => notify(message, 'success');\r\n\r\n  const notifyError = (message) => notify(message, 'error');\r\n\r\n  const notify = (message, style) => {    \r\n    setNotification({message, style});\r\n    setTimeout(() => setNotification({message:'', style:'success'}), 2000);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>      \r\n      <Notification message={notification.message} style={notification.style}/>\r\n      <Filter text={filter} onChange={(e) => setFilter(e.target.value)} />\r\n      <h2>Add new</h2>   \r\n      <PersonForm name={newName} number={newNumber}\r\n        setName={setNewName} setNumber={setNewNumber}\r\n        onSubmit={onSubmit} />\r\n      <h2>Numbers</h2>\r\n      <Persons persons={filterPersons()} remove={remove} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}